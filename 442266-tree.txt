--02/12/2014----------------------------------------------------- 
Lexical Tokens for a.spl 
--17:51:29.86----------------------------------------------------- 
Identifier: ProgA Token: identifier_SPL
Token: COLON
Token: CODE_SPL
Token: WRITE_SPL
Token: BRA
Char: 'h' Token: CHARACTER_CONSTANT
Token: COMMA
Char: 'e' Token: CHARACTER_CONSTANT
Token: COMMA
Char: 'l' Token: CHARACTER_CONSTANT
Token: COMMA
Char: 'l' Token: CHARACTER_CONSTANT
Token: COMMA
Char: 'o' Token: CHARACTER_CONSTANT
Token: KET
Token: SEMICOLON
Token: NEWLINE_SPL
Token: ENDP_SPL
Identifier: ProgA Token: identifier_SPL
Token: DOT
--02/12/2014----------------------------------------------------- 
Lexical Tokens for b.spl 
--17:51:45.18----------------------------------------------------- 
Identifier: ProgB Token: identifier_SPL
Token: COLON
Token: DECLARATIONS_SPL
Identifier: a Token: identifier_SPL
Token: COMMA
Identifier: b Token: identifier_SPL
Token: COMMA
Identifier: c Token: identifier_SPL
Token: OF_SPL
Token: TYPE_SPL
Token: INTEGER_SPL
Token: SEMICOLON
Identifier: d Token: identifier_SPL
Token: COMMA
Identifier: e Token: identifier_SPL
Token: OF_SPL
Token: TYPE_SPL
Token: REAL_SPL
Token: SEMICOLON
Identifier: f Token: identifier_SPL
Token: OF_SPL
Token: TYPE_SPL
Token: CHARACTER_SPL
Token: SEMICOLON
Token: CODE_SPL
Token: READ_SPL
Token: BRA
Identifier: a Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: READ_SPL
Token: BRA
Identifier: b Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: IF_SPL
Identifier: a Token: identifier_SPL
Token: GREATER_THAN
Identifier: b Token: identifier_SPL
Token: THEN_SPL
Token: WRITE_SPL
Token: BRA
Char: 'A' Token: CHARACTER_CONSTANT
Token: KET
Token: ELSE_SPL
Token: WRITE_SPL
Token: BRA
Char: 'B' Token: CHARACTER_CONSTANT
Token: KET
Token: ENDIF_SPL
Token: SEMICOLON
Token: NEWLINE_SPL
Token: SEMICOLON
Token: READ_SPL
Token: BRA
Identifier: d Token: identifier_SPL
Token: KET
Token: SEMICOLON
Identifier: d Token: identifier_SPL
Token: TIMES
Float: 2.300000 Token: FLOAT_NUM
Token: ASSIGMENT
Identifier: e Token: identifier_SPL
Token: SEMICOLON
Token: WRITE_SPL
Token: BRA
Identifier: e Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: NEWLINE_SPL
Token: SEMICOLON
Token: READ_SPL
Token: BRA
Identifier: f Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: WRITE_SPL
Token: BRA
Identifier: f Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: NEWLINE_SPL
Token: ENDP_SPL
Identifier: ProgB Token: identifier_SPL
Token: DOT
--02/12/2014----------------------------------------------------- 
Lexical Tokens for c.spl 
--17:51:46.80----------------------------------------------------- 
Identifier: Prog3 Token: identifier_SPL
Token: COLON
Token: DECLARATIONS_SPL
Identifier: a Token: identifier_SPL
Token: OF_SPL
Token: TYPE_SPL
Token: INTEGER_SPL
Token: SEMICOLON
Token: CODE_SPL
Token: FOR_SPL
Identifier: a Token: identifier_SPL
Token: IS_SPL
Integer: 1 Token: INTERGER_NUM
Token: BY_SPL
Integer: 1 Token: INTERGER_NUM
Token: TO_SPL
Integer: 13 Token: INTERGER_NUM
Token: DO_SPL
Token: IF_SPL
Token: NOT_SPL
Identifier: a Token: identifier_SPL
Token: EQUALS
Integer: 7 Token: INTERGER_NUM
Token: THEN_SPL
Token: WRITE_SPL
Token: BRA
Identifier: a Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: NEWLINE_SPL
Token: ENDIF_SPL
Token: ENDFOR_SPL
Token: SEMICOLON
Integer: 0 Token: INTERGER_NUM
Token: ASSIGMENT
Identifier: a Token: identifier_SPL
Token: SEMICOLON
Token: DO_SPL
Identifier: a Token: identifier_SPL
Token: PLUS
Integer: 1 Token: INTERGER_NUM
Token: ASSIGMENT
Identifier: a Token: identifier_SPL
Token: SEMICOLON
Token: IF_SPL
Token: NOT_SPL
Identifier: a Token: identifier_SPL
Token: EQUALS
Integer: 6 Token: INTERGER_NUM
Token: AND_SPL
Identifier: a Token: identifier_SPL
Token: NOT_EQUALS
Integer: 8 Token: INTERGER_NUM
Token: THEN_SPL
Token: WRITE_SPL
Token: BRA
Identifier: a Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: NEWLINE_SPL
Token: ENDIF_SPL
Token: WHILE_SPL
Identifier: a Token: identifier_SPL
Token: LESS_THAN
Integer: 14 Token: INTERGER_NUM
Token: ENDDO_SPL
Token: SEMICOLON
Integer: 0 Token: INTERGER_NUM
Token: ASSIGMENT
Identifier: a Token: identifier_SPL
Token: SEMICOLON
Token: WHILE_SPL
Identifier: a Token: identifier_SPL
Token: LESS_THAN
Integer: 12 Token: INTERGER_NUM
Token: DO_SPL
Token: WRITE_SPL
Token: BRA
Identifier: a Token: identifier_SPL
Token: KET
Token: SEMICOLON
Identifier: a Token: identifier_SPL
Token: PLUS
Integer: 1 Token: INTERGER_NUM
Token: ASSIGMENT
Identifier: a Token: identifier_SPL
Token: ENDWHILE_SPL
Token: ENDP_SPL
Identifier: Prog3 Token: identifier_SPL
Token: DOT
--02/12/2014----------------------------------------------------- 
Lexical Tokens for d.spl 
--17:51:47.80----------------------------------------------------- 
Identifier: Prog4D Token: identifier_SPL
Token: COLON
Token: DECLARATIONS_SPL
Identifier: r1 Token: identifier_SPL
Token: COMMA
Identifier: r2 Token: identifier_SPL
Token: COMMA
Identifier: r3 Token: identifier_SPL
Token: OF_SPL
Token: TYPE_SPL
Token: REAL_SPL
Token: SEMICOLON
Token: CODE_SPL
Token: MINUS
Float: 2.400000 Token: FLOAT_NUM
Token: ASSIGMENT
Identifier: r1 Token: identifier_SPL
Token: SEMICOLON
Token: MINUS
Float: 34.989000 Token: FLOAT_NUM
Token: ASSIGMENT
Identifier: r2 Token: identifier_SPL
Token: SEMICOLON
Identifier: r1 Token: identifier_SPL
Token: TIMES
Identifier: r2 Token: identifier_SPL
Token: DIVIDE
Float: 7.400000 Token: FLOAT_NUM
Token: ASSIGMENT
Identifier: r3 Token: identifier_SPL
Token: SEMICOLON
Token: WRITE_SPL
Token: BRA
Identifier: r3 Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: NEWLINE_SPL
Token: SEMICOLON
Token: READ_SPL
Token: BRA
Identifier: r1 Token: identifier_SPL
Token: KET
Token: SEMICOLON
Identifier: r1 Token: identifier_SPL
Token: PLUS
Identifier: r3 Token: identifier_SPL
Token: ASSIGMENT
Identifier: r3 Token: identifier_SPL
Token: SEMICOLON
Token: WRITE_SPL
Token: BRA
Identifier: r3 Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: NEWLINE_SPL
Token: ENDP_SPL
Identifier: Prog4D Token: identifier_SPL
Token: DOT
--02/12/2014----------------------------------------------------- 
Lexical Tokens for e.spl 
--17:51:48.83----------------------------------------------------- 
Identifier: ProgV Token: identifier_SPL
Token: COLON
Token: DECLARATIONS_SPL
Identifier: integer Token: identifier_SPL
Token: COMMA
Identifier: i Token: identifier_SPL
Token: OF_SPL
Token: TYPE_SPL
Token: INTEGER_SPL
Token: SEMICOLON
Token: CODE_SPL
Token: READ_SPL
Token: BRA
Identifier: integer Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: IF_SPL
Identifier: integer Token: identifier_SPL
Token: LESS_THAN_OR_EQUAL
Integer: 5 Token: INTERGER_NUM
Token: OR_SPL
Identifier: integer Token: identifier_SPL
Token: GREATER_THAN_OR_EQUAL
Integer: 12 Token: INTERGER_NUM
Token: THEN_SPL
Token: WRITE_SPL
Token: BRA
Identifier: integer Token: identifier_SPL
Token: KET
Token: ENDIF_SPL
Token: SEMICOLON
Token: WRITE_SPL
Token: BRA
Token: BRA
Float: 35.100000 Token: FLOAT_NUM
Token: MINUS
Float: 0.100000 Token: FLOAT_NUM
Token: KET
Token: KET
Token: SEMICOLON
Token: NEWLINE_SPL
Token: SEMICOLON
Token: FOR_SPL
Identifier: integer Token: identifier_SPL
Token: IS_SPL
Token: MINUS
Integer: 1 Token: INTERGER_NUM
Token: BY_SPL
Token: MINUS
Integer: 1 Token: INTERGER_NUM
Token: TO_SPL
Token: MINUS
Integer: 5 Token: INTERGER_NUM
Token: DO_SPL
Token: WRITE_SPL
Token: BRA
Identifier: integer Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: NEWLINE_SPL
Token: ENDFOR_SPL
Token: SEMICOLON
Token: MINUS
Integer: 1 Token: INTERGER_NUM
Token: ASSIGMENT
Identifier: i Token: identifier_SPL
Token: SEMICOLON
Token: FOR_SPL
Identifier: integer Token: identifier_SPL
Token: IS_SPL
Identifier: i Token: identifier_SPL
Token: TIMES
Identifier: i Token: identifier_SPL
Token: TIMES
Identifier: i Token: identifier_SPL
Token: BY_SPL
Identifier: i Token: identifier_SPL
Token: TIMES
Identifier: i Token: identifier_SPL
Token: TIMES
Identifier: i Token: identifier_SPL
Token: TIMES
Identifier: i Token: identifier_SPL
Token: TIMES
Identifier: i Token: identifier_SPL
Token: TO_SPL
Identifier: i Token: identifier_SPL
Token: TIMES
Identifier: i Token: identifier_SPL
Token: TIMES
Token: BRA
Identifier: i Token: identifier_SPL
Token: PLUS
Identifier: i Token: identifier_SPL
Token: PLUS
Identifier: i Token: identifier_SPL
Token: PLUS
Identifier: i Token: identifier_SPL
Token: PLUS
Identifier: i Token: identifier_SPL
Token: KET
Token: DO_SPL
Token: WRITE_SPL
Token: BRA
Identifier: integer Token: identifier_SPL
Token: KET
Token: SEMICOLON
Token: NEWLINE_SPL
Token: ENDFOR_SPL
Token: ENDP_SPL
Identifier: ProgV Token: identifier_SPL
Token: DOT
--02/12/2014----------------------------------------------------- 
Parse debug output for a.spl 
--17:51:52.35----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token CODE_SPL ()
Shifting token CODE_SPL ()
Entering state 6
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 13
Reducing stack by rule 52 (line 736):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 21 52
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 21 52
Entering state 80
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 101
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 13
Reducing stack by rule 52 (line 736):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 21 52 80 101
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 21 52 80 101
Entering state 80
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 101
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 13
Reducing stack by rule 52 (line 736):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 21 52 80 101 80 101
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 21 52 80 101 80 101
Entering state 80
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 101
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 13
Reducing stack by rule 52 (line 736):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 21 52 80 101 80 101 80 101
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 21 52 80 101 80 101 80 101
Entering state 80
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 101
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 13
Reducing stack by rule 52 (line 736):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 21 52 80 101 80 101 80 101 80 101
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 21 52 80 101 80 101 80 101 80 101
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 21 52 80 101 80 101 80 101 80 101
Entering state 109
Reducing stack by rule 29 (line 491):
   $1 = nterm value ()
   $2 = token COMMA ()
   $3 = nterm output_list ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 21 52 80 101 80 101 80 101
Entering state 109
Reducing stack by rule 29 (line 491):
   $1 = nterm value ()
   $2 = token COMMA ()
   $3 = nterm output_list ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 21 52 80 101 80 101
Entering state 109
Reducing stack by rule 29 (line 491):
   $1 = nterm value ()
   $2 = token COMMA ()
   $3 = nterm output_list ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 21 52 80 101
Entering state 109
Reducing stack by rule 29 (line 491):
   $1 = nterm value ()
   $2 = token COMMA ()
   $3 = nterm output_list ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = t#include <stdio.h>
int main(void) {
printf("%c", 'h');
printf("%c", 'e');
printf("%c", 'l');
printf("%c", 'l');
printf("%c", 'o');
printf("\n");

return 0;
}oken KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 25 54
Entering state 25
Reading a token: Next token is token ENDP_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6
Entering state 24
Reducing stack by rule 3 (line 158):
   $1 = token CODE_SPL ()
   $2 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_SPL ()
Shifting token ENDP_SPL ()
Entering state 39
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 60
Reading a token: Next token is token DOT ()
Shifting token DOT ()
Entering state 88
Reducing stack by rule 1 (line 137):
   $1 = token identifier_SPL ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP_SPL ()
   $5 = token identifier_SPL ()
   $6 = token DOT ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--02/12/2014----------------------------------------------------- 
Parse debug output for b.spl 
--17:51:55.71----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_SPL ()
Shifting token DECLARATIONS_SPL ()
Entering state 5
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 40
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 40
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token OF_SPL ()
Reducing stack by rule 6 (line 201):
   $1 = token identifier_SPL ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5 8 40 8 40
Entering state 61
Reducing stack by rule 7 (line 205):
   $1 = token identifier_SPL ()
   $2 = token COMMA ()
   $3 = nterm declaration ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5 8 40
Entering state 61
Reducing stack by rule 7 (line 205):
   $1 = token identifier_SPL ()
   $2 = token COMMA ()
   $3 = nterm declaration ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5
Entering state 10
Next token is token OF_SPL ()
Shifting token OF_SPL ()
Entering state 42
Reading a token: Next token is token TYPE_SPL ()
Shifting token TYPE_SPL ()
Entering state 63
Reading a token: Next token is token INTEGER_SPL ()
Shifting token INTEGER_SPL ()
Entering state 90
Reducing stack by rule 9 (line 233):
   $1 = token INTEGER_SPL ()
-> $$ = nterm type ()
Stack now 0 1 3 5 10 42 63
Entering state 92
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 103
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 40
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token OF_SPL ()
Reducing stack by rule 6 (line 201):
   $1 = token identifier_SPL ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5 10 42 63 92 103 8 40
Entering state 61
Reducing stack by rule 7 (line 205):
   $1 = token identifier_SPL ()
   $2 = token COMMA ()
   $3 = nterm declaration ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5 10 42 63 92 103
Entering state 10
Next token is token OF_SPL ()
Shifting token OF_SPL ()
Entering state 42
Reading a token: Next token is token TYPE_SPL ()
Shifting token TYPE_SPL ()
Entering state 63
Reading a token: Next token is token REAL_SPL ()
Shifting token REAL_SPL ()
Entering state 91
Reducing stack by rule 10 (line 237):
   $1 = token REAL_SPL ()
-> $$ = nterm type ()
Stack now 0 1 3 5 10 42 63 92 103 10 42 63
Entering state 92
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 103
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token OF_SPL ()
Reducing stack by rule 6 (line 201):
   $1 = token identifier_SPL ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5 10 42 63 92 103 10 42 63 92 103
Entering state 10
Next token is token OF_SPL ()
Shifting token OF_SPL ()
Entering state 42
Reading a token: Next token is token TYPE_SPL ()
Shifting token TYPE_SPL ()
Entering state 63
Reading a token: Next token is token CHARACTER_SPL ()
Shifting token CHARACTER_SPL ()
Entering state 89
Reducing stack by rule 8 (line 229):
   $1 = token CHARACTER_SPL ()
-> $$ = nterm type ()
Stack now 0 1 3 5 10 42 63 92 103 10 42 63 92 103 10 42 63
Entering state 92
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 103
Reading a token: Next token is token CODE_SPL ()
Reducing stack by rule 4 (line 177):
   $1 = nterm declaration ()
   $2 = token OF_SPL ()
   $3 = token TYPE_SPL ()
   $4 = nterm type ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5 10 42 63 92 103 10 42 63 92 103
Entering state 110
Reducing stack by rule 5 (line 181):
   $1 = nterm declaration ()
   $2 = token OF_SPL ()
   $3 = token TYPE_SPL ()
   $4 = nterm type ()
   $5 = token SEMICOLON ()
   $6 = nterm declaration_block ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5 10 42 63 92 103
Entering state 110
Reducing stack by rule 5 (line 181):
   $1 = nterm declaration ()
   $2 = token OF_SPL ()
   $3 = token TYPE_SPL ()
   $4 = nterm type ()
   $5 = token SEMICOLON ()
   $6 = nterm declaration_block ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5
Entering state 9
Next token is token CODE_SPL ()
Shifting token CODE_SPL ()
Entering state 41
Reading a token: Next token is token READ_SPL ()
Shifting token READ_SPL ()
Entering state 23
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 53
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 81
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 102
Reducing stack by rule 28 (line 484):
   $1 = token READ_SPL ()
   $2 = token BRA ()
   $3 = token identifier_SPL ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 41
Entering state 32
Reducing stack by rule 19 (line 305):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token READ_SPL ()
Shifting token READ_SPL ()
Entering state 23
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 53
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 81
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 102
Reducing stack by rule 28 (line 484):
   $1 = token READ_SPL ()
   $2 = token BRA ()
   $3 = token identifier_SPL ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 41 25 54
Entering state 32
Reducing stack by rule 19 (line 305):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token IF_SPL ()
Shifting token IF_SPL ()
Entering state 17
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 17
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 17
Entering state 34
Reading a token: Next token is token GREATER_THAN ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 17
Entering state 48
Next token is token GREATER_THAN ()
Shifting token GREATER_THAN ()
Entering state 72
Reducing stack by rule 39 (line 591):
   $1 = token GREATER_THAN ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 48
Entering state 75
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 48 75
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 48 75
Entering state 34
Reading a token: Next token is token THEN_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 48 75
Entering state 96
Next token is token THEN_SPL ()
Reducing stack by rule 34 (line 552):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 41 25 54 25 54 17
Entering state 47
Reducing stack by rule 33 (line 527):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 41 25 54 25 54 17
Entering state 46
Next token is token THEN_SPL ()
Shifting token THEN_SPL ()
Entering state 66
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 13
Reducing stack by rule 52 (line 736):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66 21 52
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66
Entering state 25
Reading a token: Next token is token ELSE_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66
Entering state 93
Next token is token ELSE_SPL ()
Shifting token ELSE_SPL ()
Entering state 104
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 13
Reducing stack by rule 52 (line 736):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66 93 104 21 52
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66 93 104 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66 93 104 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66 93 104
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66 93 104
Entering state 25
Reading a token: Next token is token ENDIF_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 17 46 66 93 104
Entering state 111
Next token is token ENDIF_SPL ()
Shifting token ENDIF_SPL ()
Entering state 113
Reducing stack by rule 21 (line 360):
   $1 = token IF_SPL ()
   $2 = nterm conditional ()
   $3 = token THEN_SPL ()
   $4 = nterm statement_list ()
   $5 = token ELSE_SPL ()
   $6 = nterm statement_list ()
   $7 = token ENDIF_SPL ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 27
Reducing stack by rule 14 (line 285):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token READ_SPL ()
Shifting token READ_SPL ()
Entering state 23
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 53
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 81
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 102
Reducing stack by rule 28 (line 484):
   $1 = token READ_SPL ()
   $2 = token BRA ()
   $3 = token identifier_SPL ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 32
Reducing stack by rule 19 (line 305):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 34
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token FLOAT_NUM ()
Shifting token FLOAT_NUM ()
Entering state 14
Reducing stack by rule 56 (line 776):
   $1 = token FLOAT_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 34 58
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 34 58
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 34 58
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 34 58
Entering state 86
Reducing stack by rule 45 (line 660):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 34
Reading a token: Next token is token ASSIGMENT ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 33
Next token is token ASSIGMENT ()
Shifting token ASSIGMENT ()
Entering state 55
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 83
Reducing stack by rule 20 (line 341):
   $1 = nterm expression ()
   $2 = token ASSIGMENT ()
   $3 = token identifier_SPL ()
-> $$ = nterm assignment_statment ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 26
Reducing stack by rule 13 (line 281):
   $1 = nterm assignment_statment ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token READ_SPL ()
Shifting token READ_SPL ()
Entering state 23
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 53
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 81
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 102
Reducing stack by rule 28 (line 484):
   $1 = token READ_SPL ()
   $2 = token BRA ()
   $3 = token identifier_SPL ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 32
Reducing stack by rule 19 (line 305):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $#include <stdio.h>
int main(void) {
int a, b, c;
float d, e;
char f;
scanf("%d", &a);
scanf("%d", &b);
if (a > b) { 
printf("%c", 'A');
}
else { 
printf("%c", 'B');
}
printf("\n");
scanf("%f", &d);
e = d * 2.3;
printf("%f", e);
printf("\n");
scanf(" %[^\n]c", &f);
printf("%c", f);
printf("\n");

return 0;
}$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token ENDP_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41
Entering state 62
Reducing stack by rule 2 (line 154):
   $1 = token DECLARATIONS_SPL ()
   $2 = nterm declaration_block ()
   $3 = token CODE_SPL ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_SPL ()
Shifting token ENDP_SPL ()
Entering state 39
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 60
Reading a token: Next token is token DOT ()
Shifting token DOT ()
Entering state 88
Reducing stack by rule 1 (line 137):
   $1 = token identifier_SPL ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP_SPL ()
   $5 = token identifier_SPL ()
   $6 = token DOT ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--02/12/2014----------------------------------------------------- 
Parse debug output for c.spl 
--17:51:58.88----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_SPL ()
Shifting token DECLARATIONS_SPL ()
Entering state 5
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token OF_SPL ()
Reducing stack by rule 6 (line 201):
   $1 = token identifier_SPL ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5
Entering state 10
Next token is token OF_SPL ()
Shifting token OF_SPL ()
Entering state 42
Reading a token: Next token is token TYPE_SPL ()
Shifting token TYPE_SPL ()
Entering state 63
Reading a token: Next token is token INTEGER_SPL ()
Shifting token INTEGER_SPL ()
Entering state 90
Reducing stack by rule 9 (line 233):
   $1 = token INTEGER_SPL ()
-> $$ = nterm type ()
Stack now 0 1 3 5 10 42 63
Entering state 92
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 103
Reading a token: Next token is token CODE_SPL ()
Reducing stack by rule 4 (line 177):
   $1 = nterm declaration ()
   $2 = token OF_SPL ()
   $3 = token TYPE_SPL ()
   $4 = nterm type ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5
Entering state 9
Next token is token CODE_SPL ()
Shifting token CODE_SPL ()
Entering state 41
Reading a token: Next token is token FOR_SPL ()
Shifting token FOR_SPL ()
Entering state 20
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 51
Reading a token: Next token is token IS_SPL ()
Shifting token IS_SPL ()
Entering state 78
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 20 51 78
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 20 51 78
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 20 51 78
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 20 51 78
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 20 51 78
Entering state 34
Reading a token: Next token is token BY_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 20 51 78
Entering state 99
Next token is token BY_SPL ()
Shifting token BY_SPL ()
Entering state 108
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 20 51 78 99 108
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 20 51 78 99 108
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 20 51 78 99 108
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 20 51 78 99 108
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 20 51 78 99 108
Entering state 34
Reading a token: Next token is token TO_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 20 51 78 99 108
Entering state 112
Next token is token TO_SPL ()
Shifting token TO_SPL ()
Entering state 114
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114
Entering state 34
Reading a token: Next token is token DO_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114
Entering state 115
Next token is token DO_SPL ()
Shifting token DO_SPL ()
Entering state 116
Reading a token: Next token is token IF_SPL ()
Shifting token IF_SPL ()
Entering state 17
Reading a token: Next token is token NOT_SPL ()
Shifting token NOT_SPL ()
Entering state 45
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45
Entering state 34
Reading a token: Next token is token EQUALS ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45
Entering state 48
Next token is token EQUALS ()
Shifting token EQUALS ()
Entering state 69
Reducing stack by rule 36 (line 579):
   $1 = token EQUALS ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45 48
Entering state 75
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45 48 75
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45 48 75
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45 48 75
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45 48 75
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45 48 75
Entering state 34
Reading a token: Next token is token THEN_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45 48 75
Entering state 96
Next token is token THEN_SPL ()
Reducing stack by rule 34 (line 552):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 45
Entering state 65
Reducing stack by rule 35 (line 557):
   $1 = token NOT_SPL ()
   $2 = nterm condition ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17
Entering state 47
Reducing stack by rule 33 (line 527):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17
Entering state 46
Next token is token THEN_SPL ()
Shifting token THEN_SPL ()
Entering state 66
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 46 66 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 46 66 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 46 66
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 46 66
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 46 66 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 46 66 25 54
Entering state 25
Reading a token: Next token is token ENDIF_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 46 66 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116 17 46 66
Entering state 93
Next token is token ENDIF_SPL ()
Shifting token ENDIF_SPL ()
Entering state 105
Reducing stack by rule 22 (line 364):
   $1 = token IF_SPL ()
   $2 = nterm conditional ()
   $3 = token THEN_SPL ()
   $4 = nterm statement_list ()
   $5 = token ENDIF_SPL ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116
Entering state 27
Reducing stack by rule 14 (line 285):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116
Entering state 25
Reading a token: Next token is token ENDFOR_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 20 51 78 99 108 112 114 115 116
Entering state 117
Next token is token ENDFOR_SPL ()
Shifting token ENDFOR_SPL ()
Entering state 118
Reducing stack by rule 25 (line 432):
   $1 = token FOR_SPL ()
   $2 = token identifier_SPL ()
   $3 = token IS_SPL ()
   $4 = nterm expression ()
   $5 = token BY_SPL ()
   $6 = nterm expression ()
   $7 = token TO_SPL ()
   $8 = nterm expression ()
   $9 = token DO_SPL ()
   $10 = nterm statement_list ()
   $11 = token ENDFOR_SPL ()
-> $$ = nterm for_statement ()
Stack now 0 1 3 5 9 41
Entering state 30
Reducing stack by rule 17 (line 297):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54
Entering state 34
Reading a token: Next token is token ASSIGMENT ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54
Entering state 33
Next token is token ASSIGMENT ()
Shifting token ASSIGMENT ()
Entering state 55
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 83
Reducing stack by rule 20 (line 341):
   $1 = nterm expression ()
   $2 = token ASSIGMENT ()
   $3 = token identifier_SPL ()
-> $$ = nterm assignment_statment ()
Stack now 0 1 3 5 9 41 25 54
Entering state 26
Reducing stack by rule 13 (line 281):
   $1 = nterm assignment_statment ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token DO_SPL ()
Shifting token DO_SPL ()
Entering state 18
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 18
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 18
Entering state 34
Reading a token: Next token is token PLUS ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 18
Entering state 33
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 56
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 33 56
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 33 56
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 33 56
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 33 56
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 33 56
Entering state 84
Reading a token: Next token is token ASSIGMENT ()
Reducing stack by rule 42 (line 630):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 18
Entering state 33
Next token is token ASSIGMENT ()
Shifting token ASSIGMENT ()
Entering state 55
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 83
Reducing stack by rule 20 (line 341):
   $1 = nterm expression ()
   $2 = token ASSIGMENT ()
   $3 = token identifier_SPL ()
-> $$ = nterm assignment_statment ()
Stack now 0 1 3 5 9 41 25 54 25 54 18
Entering state 26
Reducing stack by rule 13 (line 281):
   $1 = nterm assignment_statment ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 18
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token IF_SPL ()
Shifting token IF_SPL ()
Entering state 17
Reading a token: Next token is token NOT_SPL ()
Shifting token NOT_SPL ()
Entering state 45
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45
Entering state 34
Reading a token: Next token is token EQUALS ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45
Entering state 48
Next token is token EQUALS ()
Shifting token EQUALS ()
Entering state 69
Reducing stack by rule 36 (line 579):
   $1 = token EQUALS ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45 48
Entering state 75
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45 48 75
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45 48 75
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45 48 75
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45 48 75
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45 48 75
Entering state 34
Reading a token: Next token is token AND_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45 48 75
Entering state 96
Next token is token AND_SPL ()
Reducing stack by rule 34 (line 552):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 45
Entering state 65
Reducing stack by rule 35 (line 557):
   $1 = token NOT_SPL ()
   $2 = nterm condition ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17
Entering state 47
Reducing stack by rule 33 (line 527):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17
Entering state 46
Next token is token AND_SPL ()
Shifting token AND_SPL ()
Entering state 67
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67
Entering state 34
Reading a token: Next token is token NOT_EQUALS ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67
Entering state 48
Next token is token NOT_EQUALS ()
Shifting token NOT_EQUALS ()
Entering state 70
Reducing stack by rule 37 (line 583):
   $1 = token NOT_EQUALS ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67 48
Entering state 75
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67 48 75
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67 48 75
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67 48 75
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67 48 75
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67 48 75
Entering state 34
Reading a token: Next token is token THEN_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67 48 75
Entering state 96
Next token is token THEN_SPL ()
Reducing stack by rule 34 (line 552):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 67
Entering state 94
Reducing stack by rule 31 (line 519):
   $1 = nterm conditional ()
   $2 = token AND_SPL ()
   $3 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17
Entering state 46
Next token is token THEN_SPL ()
Shifting token THEN_SPL ()
Entering state 66
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 66 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 66 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 66
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 66
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 66 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 66 25 54
Entering state 25
Reading a token: Next token is token ENDIF_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 66 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54 17 46 66
Entering state 93
Next token is token ENDIF_SPL ()
Shifting token ENDIF_SPL ()
Entering state 105
Reducing stack by rule 22 (line 364):
   $1 = token IF_SPL ()
   $2 = nterm conditional ()
   $3 = token THEN_SPL ()
   $4 = nterm statement_list ()
   $5 = token ENDIF_SPL ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54
Entering state 27
Reducing stack by rule 14 (line 285):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54
Entering state 25
Reading a token: Next token is token WHILE_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 18
Entering state 49
Next token is token WHILE_SPL ()
Shifting token WHILE_SPL ()
Entering state 76
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76
Entering state 34
Reading a token: Next token is token LESS_THAN ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76
Entering state 48
Next token is token LESS_THAN ()
Shifting token LESS_THAN ()
Entering state 71
Reducing stack by rule 38 (line 587):
   $1 = token LESS_THAN ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76 48
Entering state 75
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76 48 75
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76 48 75
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76 48 75
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76 48 75
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76 48 75
Entering state 34
Reading a token: Next token is token ENDDO_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76 48 75
Entering state 96
Next token is token ENDDO_SPL ()
Reducing stack by rule 34 (line 552):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76
Entering state 47
Reducing stack by rule 33 (line 527):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 41 25 54 25 54 18 49 76
Entering state 97
Next token is token ENDDO_SPL ()
Shifting token ENDDO_SPL ()
Entering state 106
Reducing stack by rule 23 (line 396):
   $1 = token DO_SPL ()
   $2 = nterm statement_list ()
   $3 = token WHILE_SPL ()
   $4 = nterm conditional ()
   $5 = token ENDDO_SPL ()
-> $$ = nterm do_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 28
Reducing stack by rule 15 (line 289):
   $1 = nterm do_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 34
Reading a token: Next token is token ASSIGMENT ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 33
Next token is token ASSIGMENT ()
Shifting token ASSIGMENT ()
Entering state 55
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 83
Reducing stack by rule 20 (line 341):
   $1 = nterm expression ()
   $2 = token ASSIGMENT ()
   $3 = token identifier_SPL ()
-> $$ = nterm assignment_statment ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 26
Reducing stack by rule 13 (line 281):
   $1 = nterm assignment_statment ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token WHILE_SPL ()
Shifting token WHILE_SPL ()
Entering state 19
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19
Entering state 34
Reading a token: Next token is token LESS_THAN ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19
Entering state 48
Next token is token LESS_THAN ()
Shifting token LESS_THAN ()
Entering state 71
Reducing stack by rule 38 (line 587):
   $1 = token LESS_THAN ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 48
Entering state 75
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 48 75
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 48 75
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 48 75
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 48 75
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 48 75
Entering state 34
Reading a token: Next token is token DO_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 48 75
Entering state 96
Next token is token DO_SPL ()
Reducing stack by rule 34 (line 552):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19
Entering state 47
Reducing stack by rule 33 (line 527):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19
Entering state 50
Next token is token DO_SPL ()
Shifting token DO_SPL ()
Entering state 77
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54
Entering state 34
Reading a token: Next token is token PLUS ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54
Entering state 33
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 56
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54 33 56
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54 33 56
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54 33 56
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54 33 56
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54 33 56
Entering state 84
Reading a token: Next token is token ASSIGMENT ()
Reducing stack by rule 42 (line 630):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54
Entering state 33
Next token is token ASSIGMENT ()
Shifting token ASSIGMENT ()
Entering state 55
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 83
Reducing stack by rule 20 (line 341):
   $1 = nterm expression ()
   $2 = token ASSIGMENT ()
   $3 = token identifier_SPL ()
-> $$ = nterm assignment_statment ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54
Entering state 26
Reducing stack by rule 13 (line 281):
   $1 = nterm assignment_statment ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54
Entering state 25
Reading a token: Next token is token ENDWHILE_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 19 50 77
Entering state 98
Next token is token ENDWHILE_SPL ()
Shifting token ENDWHILE_SPL ()
Entering state 107
Reducing stack by rule 24 (line 416):
   $1 = token WHILE_SPL ()
   $2 = nterm conditional ()
   $3 = token DO_SPL ()
   $4 = nterm statement_list ()
   $5 = token ENDWHILE_SPL ()
-> $$ = nterm while_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 29
Reducing stack by rule 16 (line 293):
   $1 = nterm while_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token ENDP_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 5#include <stdio.h>
int main(void) {
int a;
register int _by0;
for (a = 1; _by0=1, (a-(13))*((_by0 > 0) - (_by0 < 0)) <= 0; a += _by0){
if (!(a == 7)) { 
printf("%d", a);
printf("\n");
}

}a = 0;
do{
a = a + 1;
if (!(a == 6) && a != 8) { 
printf("%d", a);
printf("\n");
}

}
while(a < 14);
a = 0;
while(a < 12){
printf("%d", a);
a = a + 1;
}
return 0;
}4 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41
Entering state 62
Reducing stack by rule 2 (line 154):
   $1 = token DECLARATIONS_SPL ()
   $2 = nterm declaration_block ()
   $3 = token CODE_SPL ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_SPL ()
Shifting token ENDP_SPL ()
Entering state 39
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 60
Reading a token: Next token is token DOT ()
Shifting token DOT ()
Entering state 88
Reducing stack by rule 1 (line 137):
   $1 = token identifier_SPL ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP_SPL ()
   $5 = token identifier_SPL ()
   $6 = token DOT ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--02/12/2014----------------------------------------------------- 
Parse debug output for d.spl 
--17:51:59.93----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_SPL ()
Shifting token DECLARATIONS_SPL ()
Entering state 5
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 40
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 40
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token OF_SPL ()
Reducing stack by rule 6 (line 201):
   $1 = token identifier_SPL ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5 8 40 8 40
Entering state 61
Reducing stack by rule 7 (line 205):
   $1 = token identifier_SPL ()
   $2 = token COMMA ()
   $3 = nterm declaration ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5 8 40
Entering state 61
Reducing stack by rule 7 (line 205):
   $1 = token identifier_SPL ()
   $2 = token COMMA ()
   $3 = nterm declaration ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5
Entering state 10
Next token is token OF_SPL ()
Shifting token OF_SPL ()
Entering state 42
Reading a token: Next token is token TYPE_SPL ()
Shifting token TYPE_SPL ()
Entering state 63
Reading a token: Next token is token REAL_SPL ()
Shifting token REAL_SPL ()
Entering state 91
Reducing stack by rule 10 (line 237):
   $1 = token REAL_SPL ()
-> $$ = nterm type ()
Stack now 0 1 3 5 10 42 63
Entering state 92
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 103
Reading a token: Next token is token CODE_SPL ()
Reducing stack by rule 4 (line 177):
   $1 = nterm declaration ()
   $2 = token OF_SPL ()
   $3 = token TYPE_SPL ()
   $4 = nterm type ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5
Entering state 9
Next token is token CODE_SPL ()
Shifting token CODE_SPL ()
Entering state 41
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 16
Reading a token: Next token is token FLOAT_NUM ()
Shifting token FLOAT_NUM ()
Entering state 14
Reducing stack by rule 56 (line 776):
   $1 = token FLOAT_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 16
Entering state 44
Reducing stack by rule 54 (line 753):
   $1 = token MINUS ()
   $2 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41
Entering state 34
Reading a token: Next token is token ASSIGMENT ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41
Entering state 33
Next token is token ASSIGMENT ()
Shifting token ASSIGMENT ()
Entering state 55
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 83
Reducing stack by rule 20 (line 341):
   $1 = nterm expression ()
   $2 = token ASSIGMENT ()
   $3 = token identifier_SPL ()
-> $$ = nterm assignment_statment ()
Stack now 0 1 3 5 9 41
Entering state 26
Reducing stack by rule 13 (line 281):
   $1 = nterm assignment_statment ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 16
Reading a token: Next token is token FLOAT_NUM ()
Shifting token FLOAT_NUM ()
Entering state 14
Reducing stack by rule 56 (line 776):
   $1 = token FLOAT_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 16
Entering state 44
Reducing stack by rule 54 (line 753):
   $1 = token MINUS ()
   $2 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54
Entering state 34
Reading a token: Next token is token ASSIGMENT ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54
Entering state 33
Next token is token ASSIGMENT ()
Shifting token ASSIGMENT ()
Entering state 55
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 83
Reducing stack by rule 20 (line 341):
   $1 = nterm expression ()
   $2 = token ASSIGMENT ()
   $3 = token identifier_SPL ()
-> $$ = nterm assignment_statment ()
Stack now 0 1 3 5 9 41 25 54
Entering state 26
Reducing stack by rule 13 (line 281):
   $1 = nterm assignment_statment ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 34
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 34 58
Entering state 86
Reducing stack by rule 45 (line 660):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 34
Reading a token: Next token is token DIVIDE ()
Shifting token DIVIDE ()
Entering state 59
Reading a token: Next token is token FLOAT_NUM ()
Shifting token FLOAT_NUM ()
Entering state 14
Reducing stack by rule 56 (line 776):
   $1 = token FLOAT_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 34 59
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 34 59
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 34 59
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 34 59
Entering state 87
Reducing stack by rule 46 (line 664):
   $1 = nterm term ()
   $2 = token DIVIDE ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 34
Reading a token: Next token is token ASSIGMENT ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 33
Next token is token ASSIGMENT ()
Shifting token ASSIGMENT ()
Entering state 55
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 83
Reducing stack by rule 20 (line 341):
   $1 = nterm expression ()
   $2 = token ASSIGMENT ()
   $3 = token identifier_SPL ()
-> $$ = nterm assignment_statment ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 26
Reducing stack by rule 13 (line 281):
   $1 = nterm assignment_statment ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token READ_SPL ()
Shifting token READ_SPL ()
Entering state 23
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 53
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 81
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 102
Reducing stack by rule 28 (line 484):
   $1 = token READ_SPL ()
   $2 = token BRA ()
   $3 = token identifier_SPL ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 32
Reducing stack by rule 19 (line 305):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 34
Reading a token: Next token is token PLUS ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 33
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 56
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 33 56
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 33 56
Entering state 84
Reading a token: Next token is token ASSIGMENT ()
Reducing stack by rule 42 (line 630):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 33
Next token is token ASSIGMENT ()
Shifting token ASSIGMENT ()
Entering state 55
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 83
Reducing stack by rule 20 (line 341):
   $1 = nterm expression ()
   $2 = token ASSIGMENT ()
   $3 = token identifier_SPL ()
-> $$ = nterm assignment_statment ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 26
Reducing stack by rule 13 (line 281):
   $1 = nterm assignment_statment ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token ENDP_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $#include <stdio.h>
int main(void) {
float r1, r2, r3;
r1 = -2.4;
r2 = -34.989;
r3 = r1 * r2 / 7.4;
printf("%f", r3);
printf("\n");
scanf("%f", &r1);
r3 = r1 + r3;
printf("%f", r3);
printf("\n");

return 0;
}$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41
Entering state 62
Reducing stack by rule 2 (line 154):
   $1 = token DECLARATIONS_SPL ()
   $2 = nterm declaration_block ()
   $3 = token CODE_SPL ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_SPL ()
Shifting token ENDP_SPL ()
Entering state 39
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 60
Reading a token: Next token is token DOT ()
Shifting token DOT ()
Entering state 88
Reducing stack by rule 1 (line 137):
   $1 = token identifier_SPL ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP_SPL ()
   $5 = token identifier_SPL ()
   $6 = token DOT ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--02/12/2014----------------------------------------------------- 
Parse debug output for e.spl 
--17:52:00.93----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_SPL ()
Shifting token DECLARATIONS_SPL ()
Entering state 5
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 40
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 8
Reading a token: Next token is token OF_SPL ()
Reducing stack by rule 6 (line 201):
   $1 = token identifier_SPL ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5 8 40
Entering state 61
Reducing stack by rule 7 (line 205):
   $1 = token identifier_SPL ()
   $2 = token COMMA ()
   $3 = nterm declaration ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5
Entering state 10
Next token is token OF_SPL ()
Shifting token OF_SPL ()
Entering state 42
Reading a token: Next token is token TYPE_SPL ()
Shifting token TYPE_SPL ()
Entering state 63
Reading a token: Next token is token INTEGER_SPL ()
Shifting token INTEGER_SPL ()
Entering state 90
Reducing stack by rule 9 (line 233):
   $1 = token INTEGER_SPL ()
-> $$ = nterm type ()
Stack now 0 1 3 5 10 42 63
Entering state 92
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 103
Reading a token: Next token is token CODE_SPL ()
Reducing stack by rule 4 (line 177):
   $1 = nterm declaration ()
   $2 = token OF_SPL ()
   $3 = token TYPE_SPL ()
   $4 = nterm type ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5
Entering state 9
Next token is token CODE_SPL ()
Shifting token CODE_SPL ()
Entering state 41
Reading a token: Next token is token READ_SPL ()
Shifting token READ_SPL ()
Entering state 23
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 53
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 81
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 102
Reducing stack by rule 28 (line 484):
   $1 = token READ_SPL ()
   $2 = token BRA ()
   $3 = token identifier_SPL ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 41
Entering state 32
Reducing stack by rule 19 (line 305):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token IF_SPL ()
Shifting token IF_SPL ()
Entering state 17
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 17
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 17
Entering state 34
Reading a token: Next token is token LESS_THAN_OR_EQUAL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 17
Entering state 48
Next token is token LESS_THAN_OR_EQUAL ()
Shifting token LESS_THAN_OR_EQUAL ()
Entering state 73
Reducing stack by rule 40 (line 595):
   $1 = token LESS_THAN_OR_EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 41 25 54 17 48
Entering state 75
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 17 48 75
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 17 48 75
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 17 48 75
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 17 48 75
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 17 48 75
Entering state 34
Reading a token: Next token is token OR_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 17 48 75
Entering state 96
Next token is token OR_SPL ()
Reducing stack by rule 34 (line 552):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 41 25 54 17
Entering state 47
Reducing stack by rule 33 (line 527):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 41 25 54 17
Entering state 46
Next token is token OR_SPL ()
Shifting token OR_SPL ()
Entering state 68
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 17 46 68
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 17 46 68
Entering state 34
Reading a token: Next token is token GREATER_THAN_OR_EQUAL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 17 46 68
Entering state 48
Next token is token GREATER_THAN_OR_EQUAL ()
Shifting token GREATER_THAN_OR_EQUAL ()
Entering state 74
Reducing stack by rule 41 (line 599):
   $1 = token GREATER_THAN_OR_EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 41 25 54 17 46 68 48
Entering state 75
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 17 46 68 48 75
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 17 46 68 48 75
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 17 46 68 48 75
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 17 46 68 48 75
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 17 46 68 48 75
Entering state 34
Reading a token: Next token is token THEN_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 17 46 68 48 75
Entering state 96
Next token is token THEN_SPL ()
Reducing stack by rule 34 (line 552):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 41 25 54 17 46 68
Entering state 95
Reducing stack by rule 32 (line 523):
   $1 = nterm conditional ()
   $2 = token OR_SPL ()
   $3 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 41 25 54 17
Entering state 46
Next token is token THEN_SPL ()
Shifting token THEN_SPL ()
Entering state 66
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 17 46 66 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 17 46 66 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 17 46 66
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 17 46 66
Entering state 25
Reading a token: Next token is token ENDIF_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 17 46 66
Entering state 93
Next token is token ENDIF_SPL ()
Shifting token ENDIF_SPL ()
Entering state 105
Reducing stack by rule 22 (line 364):
   $1 = token IF_SPL ()
   $2 = nterm conditional ()
   $3 = token THEN_SPL ()
   $4 = nterm statement_list ()
   $5 = token ENDIF_SPL ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 5 9 41 25 54
Entering state 27
Reducing stack by rule 14 (line 285):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 15
Reading a token: Next token is token FLOAT_NUM ()
Shifting token FLOAT_NUM ()
Entering state 14
Reducing stack by rule 56 (line 776):
   $1 = token FLOAT_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15
Entering state 34
Reading a token: Next token is token MINUS ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15
Entering state 43
Next token is token MINUS ()
Shifting token MINUS ()
Entering state 57
Reading a token: Next token is token FLOAT_NUM ()
Shifting token FLOAT_NUM ()
Entering state 14
Reducing stack by rule 56 (line 776):
   $1 = token FLOAT_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15 43 57
Entering state 38
Reducing stack by rule 53 (line 749):
   $1 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15 43 57
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15 43 57
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15 43 57
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15 43 57
Entering state 85
Reading a token: Next token is token KET ()
Reducing stack by rule 43 (line 634):
   $1 = nterm expression ()
   $2 = token MINUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52 15
Entering state 43
Next token is token KET ()
Shifting token KET ()
Entering state 64
Reducing stack by rule 50 (line 701):
   $1 = token BRA ()
   $2 = nterm expression ()
   $3 = token KET ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token FOR_SPL ()
Shifting token FOR_SPL ()
Entering state 20
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 51
Reading a token: Next token is token IS_SPL ()
Shifting token IS_SPL ()
Entering state 78
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 16
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 16
Entering state 44
Reducing stack by rule 54 (line 753):
   $1 = token MINUS ()
   $2 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78
Entering state 34
Reading a token: Next token is token BY_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78
Entering state 99
Next token is token BY_SPL ()
Shifting token BY_SPL ()
Entering state 108
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 16
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 16
Entering state 44
Reducing stack by rule 54 (line 753):
   $1 = token MINUS ()
   $2 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 34
Reading a token: Next token is token TO_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 112
Next token is token TO_SPL ()
Shifting token TO_SPL ()
Entering state 114
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 16
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 16
Entering state 44
Reducing stack by rule 54 (line 753):
   $1 = token MINUS ()
   $2 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114
Entering state 34
Reading a token: Next token is token DO_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114
Entering state 115
Next token is token DO_SPL ()
Shifting token DO_SPL ()
Entering state 116
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116 25 54
Entering state 25
Reading a token: Next token is token ENDFOR_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116
Entering state 117
Next token is token ENDFOR_SPL ()
Shifting token ENDFOR_SPL ()
Entering state 118
Reducing stack by rule 25 (line 432):
   $1 = token FOR_SPL ()
   $2 = token identifier_SPL ()
   $3 = token IS_SPL ()
   $4 = nterm expression ()
   $5 = token BY_SPL ()
   $6 = nterm expression ()
   $7 = token TO_SPL ()
   $8 = nterm expression ()
   $9 = token DO_SPL ()
   $10 = nterm statement_list ()
   $11 = token ENDFOR_SPL ()
-> $$ = nterm for_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 30
Reducing stack by rule 17 (line 297):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 16
Reading a token: Next token is token INTERGER_NUM ()
Shifting token INTERGER_NUM ()
Entering state 12
Reducing stack by rule 55 (line 772):
   $1 = token INTERGER_NUM ()
-> $$ = nterm target_number ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 16
Entering state 44
Reducing stack by rule 54 (line 753):
   $1 = token MINUS ()
   $2 = nterm target_number ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 37
Reducing stack by rule 51 (line 732):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 36
Reducing stack by rule 49 (line 697):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 34
Reading a token: Next token is token ASSIGMENT ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 33
Next token is token ASSIGMENT ()
Shifting token ASSIGMENT ()
Entering state 55
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 83
Reducing stack by rule 20 (line 341):
   $1 = nterm expression ()
   $2 = token ASSIGMENT ()
   $3 = token identifier_SPL ()
-> $$ = nterm assignment_statment ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 26
Reducing stack by rule 13 (line 281):
   $1 = nterm assignment_statment ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token FOR_SPL ()
Shifting token FOR_SPL ()
Entering state 20
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 51
Reading a token: Next token is token IS_SPL ()
Shifting token IS_SPL ()
Entering state 78
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78
Entering state 34
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 34 58
Entering state 86
Reducing stack by rule 45 (line 660):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78
Entering state 34
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 34 58
Entering state 86
Reducing stack by rule 45 (line 660):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78
Entering state 34
Reading a token: Next token is token BY_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78
Entering state 99
Next token is token BY_SPL ()
Shifting token BY_SPL ()
Entering state 108
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 34
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 34 58
Entering state 86
Reducing stack by rule 45 (line 660):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 34
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 34 58
Entering state 86
Reducing stack by rule 45 (line 660):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 34
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 34 58
Entering state 86
Reducing stack by rule 45 (line 660):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 34
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 34 58
Entering state 86
Reducing stack by rule 45 (line 660):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 34
Reading a token: Next token is token TO_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108
Entering state 112
Next token is token TO_SPL ()
Shifting token TO_SPL ()
Entering state 114
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114
Entering state 34
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58
Entering state 86
Reducing stack by rule 45 (line 660):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114
Entering state 34
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 15
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15
Entering state 34
Reading a token: Next token is token PLUS ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15
Entering state 43
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 56
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15 43 56
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15 43 56
Entering state 84
Reading a token: Next token is token PLUS ()
Reducing stack by rule 42 (line 630):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15
Entering state 43
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 56
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15 43 56
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15 43 56
Entering state 84
Reading a token: Next token is token PLUS ()
Reducing stack by rule 42 (line 630):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15
Entering state 43
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 56
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15 43 56
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15 43 56
Entering state 84
Reading a token: Next token is token PLUS ()
Reducing stack by rule 42 (line 630):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15
Entering state 43
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 56
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15 43 56
Entering state 35
Reducing stack by rule 47 (line 668):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15 43 56
Entering state 84
Reading a token: Next token is token KET ()
Reducing stack by rule 42 (line 630):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58 15
Entering state 43
Next token is token KET ()
Shifting token KET ()
Entering state 64
Reducing stack by rule 50 (line 701):
   $1 = token BRA ()
   $2 = nterm expression ()
   $3 = token KET ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 34 58
Entering state 86
Reducing stack by rule 45 (line 660):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114
Entering state 34
Reading a token: Next token is token DO_SPL ()
Reducing stack by rule 44 (line 638):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114
Entering state 115
Next token is token DO_SPL ()
Shifting token DO_SPL ()
Entering state 116
Reading a token: Next token is token WRITE_SPL ()
Shifting token WRITE_SPL ()
Entering state 21
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 11
Reducing stack by rule 48 (line 693):
   $1 = token identifier_SPL ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116 21 52
Entering state 80
Reading a token: Next token is token KET ()
Reducing stack by rule 30 (line 496):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116 21 52
Entering state 79
Next token is token KET ()
Shifting token KET ()
Entering state 100
Reducing stack by rule 26 (line 464):
   $1 = token WRITE_SPL ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116
Entering state 25
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 54
Reading a token: Next token is token NEWLINE_SPL ()
Shifting token NEWLINE_SPL ()
Entering state 22
Reducing stack by rule 27 (line 468):
   $1 = token NEWLINE_SPL ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116 25 54
Entering state 31
Reducing stack by rule 18 (line 301):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116 25 54
Entering state 25
Reading a token: Next token is token ENDFOR_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51#include <stdio.h>
int main(void) {
int integer, i;
scanf("%d", &integer);
if (integer <= 5 || integer >= 12) { 
printf("%d", integer);
}
printf("%f",  (35.1 - 0.1) );
printf("\n");
register int _by0;
for (integer = -1; _by0=-1, (integer-(-5))*((_by0 > 0) - (_by0 < 0)) <= 0; integer += _by0){
printf("%d", integer);
printf("\n");

}i = -1;
register int _by1;
for (integer = i * i * i; _by1=i * i * i * i * i, (integer-(i * i *  (i + i + i + i + i) ))*((_by1 > 0) - (_by1 < 0)) <= 0; integer += _by1){
printf("%d", integer);
printf("\n");

}
return 0;
} 78 99 108 112 114 115 116 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54 20 51 78 99 108 112 114 115 116
Entering state 117
Next token is token ENDFOR_SPL ()
Shifting token ENDFOR_SPL ()
Entering state 118
Reducing stack by rule 25 (line 432):
   $1 = token FOR_SPL ()
   $2 = token identifier_SPL ()
   $3 = token IS_SPL ()
   $4 = nterm expression ()
   $5 = token BY_SPL ()
   $6 = nterm expression ()
   $7 = token TO_SPL ()
   $8 = nterm expression ()
   $9 = token DO_SPL ()
   $10 = nterm statement_list ()
   $11 = token ENDFOR_SPL ()
-> $$ = nterm for_statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 30
Reducing stack by rule 17 (line 297):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 25
Reading a token: Next token is token ENDP_SPL ()
Reducing stack by rule 12 (line 262):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41 25 54
Entering state 82
Reducing stack by rule 11 (line 258):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 41
Entering state 62
Reducing stack by rule 2 (line 154):
   $1 = token DECLARATIONS_SPL ()
   $2 = nterm declaration_block ()
   $3 = token CODE_SPL ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_SPL ()
Shifting token ENDP_SPL ()
Entering state 39
Reading a token: Next token is token identifier_SPL ()
Shifting token identifier_SPL ()
Entering state 60
Reading a token: Next token is token DOT ()
Shifting token DOT ()
Entering state 88
Reducing stack by rule 1 (line 137):
   $1 = token identifier_SPL ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP_SPL ()
   $5 = token identifier_SPL ()
   $6 = token DOT ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--02/12/2014----------------------------------------------------- 
Parse Tree output for a.spl 
--17:52:07.70----------------------------------------------------- 
Node identifier PROGRAM
  Node identifier BLOCK_2
    Node identifier STATEMENT_LIST_1
      Node identifier STATEMENT_WRITE
        Node identifier WRITE_STATEMENT_1
          Node identifier OUTPUT_LIST_1
            Node identifier VALUE_ID
              Node identifier VALUE_EX
               CHAR CONSTANT: 'h'
            Node identifier OUTPUT_LIST_1
              Node identifier VALUE_ID
                Node identifier VALUE_EX
                 CHAR CONSTANT: 'e'
              Node identifier OUTPUT_LIST_1
                Node identifier VALUE_ID
                  Node identifier VALUE_EX
                   CHAR CONSTANT: 'l'
                Node identifier OUTPUT_LIST_1
                  Node identifier VALUE_ID
                    Node identifier VALUE_EX
                     CHAR CONSTANT: 'l'
                  Node identifier OUTPUT_LIST_2
                    Node identifier VALUE_ID
                      Node identifier VALUE_EX
                       CHAR CONSTANT: 'o'
      Node identifier STATEMENT_LIST_2
        Node identifier STATEMENT_WRITE
          Node identifier WRITE_STATEMENT_2
          --02/12/2014----------------------------------------------------- 
Parse Tree output for b.spl 
--17:52:12.59----------------------------------------------------- 
Node identifier PROGRAM
  Node identifier BLOCK_1
    Node identifier DECLARATION_BLOCK_2
      Node identifier DECLARATION_2
              Node identifier DECLARATION_2
                  Node identifier DECLARATION_1
                Node identifier TYPE
            Node identifier DECLARATION_BLOCK_2
        Node identifier DECLARATION_2
                  Node identifier DECLARATION_1
                  Node identifier TYPE
                Node identifier DECLARATION_BLOCK_1
          Node identifier DECLARATION_1
                    Node identifier TYPE
              Node identifier STATEMENT_LIST_1
      Node identifier STATEMENT_READ
        Node identifier READ_STATEMENT
              Node identifier STATEMENT_LIST_1
        Node identifier STATEMENT_READ
          Node identifier READ_STATEMENT
                  Node identifier STATEMENT_LIST_1
          Node identifier STATEMENT_IF
            Node identifier TARGET_NUMBER_FLO
              Node identifier CONDITIONAL_2
                Node identifier TERM_3
                  Node identifier EXPRESSION_2
                    Node identifier TERM_2
                      Node identifier TARGET_NUMBER
                       VAL IDENTIFIER: a
                  Node identifier COMPAROTOR_3
                                    Node identifier EXPRESSION_2
                    Node identifier TERM_2
                      Node identifier TARGET_NUMBER
                       VAL IDENTIFIER: b
              Node identifier STATEMENT_LIST_2
                Node identifier STATEMENT_WRITE
                  Node identifier WRITE_STATEMENT_1
                    Node identifier OUTPUT_LIST_2
                      Node identifier VALUE_ID
                        Node identifier VALUE_EX
                         CHAR CONSTANT: 'A'
              Node identifier STATEMENT_LIST_2
                Node identifier STATEMENT_WRITE
                  Node identifier WRITE_STATEMENT_1
                    Node identifier OUTPUT_LIST_2
                      Node identifier VALUE_ID
                        Node identifier VALUE_EX
                         CHAR CONSTANT: 'B'
          Node identifier STATEMENT_LIST_1
            Node identifier STATEMENT_WRITE
              Node identifier WRITE_STATEMENT_2
                          Node identifier STATEMENT_LIST_1
              Node identifier STATEMENT_READ
                Node identifier READ_STATEMENT
                              Node identifier STATEMENT_LIST_1
                Node identifier STATEMENT_ASS
                  Node identifier ASSIGMENT_STATMENT
                                      Node identifier EXPRESSION_2
                      Node identifier CONDITIONAL_3
                        Node identifier TERM_2
                          Node identifier TARGET_NUMBER
                           VAL IDENTIFIER: d
                        Node identifier VALUE_ID
                          Node identifier VALUE
                            Node identifier CONSTANT
                              Node identifier TARGET_NUMBER_INT
                               FLOAT: 2.3                 Node identifier STATEMENT_LIST_1
                  Node identifier STATEMENT_WRITE
                    Node identifier WRITE_STATEMENT_1
                      Node identifier OUTPUT_LIST_2
                        Node identifier TARGET_NUMBER
                         VAL IDENTIFIER: e
                  Node identifier STATEMENT_LIST_1
                    Node identifier STATEMENT_WRITE
                      Node identifier WRITE_STATEMENT_2
                                          Node identifier STATEMENT_LIST_1
                      Node identifier STATEMENT_READ
                        Node identifier READ_STATEMENT
                                              Node identifier STATEMENT_LIST_1
                        Node identifier STATEMENT_WRITE
                          Node identifier WRITE_STATEMENT_1
                            Node identifier OUTPUT_LIST_2
                              Node identifier TARGET_NUMBER
                               VAL IDENTIFIER: f
                        Node identifier STATEMENT_LIST_2
                          Node identifier STATEMENT_WRITE
                            Node identifier WRITE_STATEMENT_2
                            --02/12/2014----------------------------------------------------- 
Parse Tree output for c.spl 
--17:52:13.79----------------------------------------------------- 
Node identifier PROGRAM
  Node identifier BLOCK_1
    Node identifier DECLARATION_BLOCK_1
      Node identifier DECLARATION_1
            Node identifier TYPE
          Node identifier STATEMENT_LIST_1
      Node identifier STATEMENT_FOR
        Node identifier FOR_STATEMENT
                  Node identifier EXPRESSION_2
            Node identifier TERM_2
              Node identifier VALUE_ID
                Node identifier VALUE
                  Node identifier CONSTANT
                    Node identifier CHAR_CONSTANT
                     INTEGER: 1           Node identifier EXPRESSION_2
            Node identifier TERM_2
              Node identifier VALUE_ID
                Node identifier VALUE
                  Node identifier CONSTANT
                    Node identifier CHAR_CONSTANT
                     INTEGER: 1           Node identifier EXPRESSION_2
            Node identifier TERM_2
              Node identifier VALUE_ID
                Node identifier VALUE
                  Node identifier CONSTANT
                    Node identifier CHAR_CONSTANT
                     INTEGER: 13           Node identifier STATEMENT_LIST_2
            Node identifier STATEMENT_IF
              Node identifier IF_STATEMENT_1
                Node identifier CONDITIONAL_2
                  Node identifier CONDITION_1
                    Node identifier TERM_3
                      Node identifier EXPRESSION_2
                        Node identifier TERM_2
                          Node identifier TARGET_NUMBER
                           VAL IDENTIFIER: a
                      Node identifier CONDITION_2
                                            Node identifier EXPRESSION_2
                        Node identifier TERM_2
                          Node identifier VALUE_ID
                            Node identifier VALUE
                              Node identifier CONSTANT
                                Node identifier CHAR_CONSTANT
                                 INTEGER: 7                 Node identifier STATEMENT_LIST_1
                  Node identifier STATEMENT_WRITE
                    Node identifier WRITE_STATEMENT_1
                      Node identifier OUTPUT_LIST_2
                        Node identifier TARGET_NUMBER
                         VAL IDENTIFIER: a
                  Node identifier STATEMENT_LIST_2
                    Node identifier STATEMENT_WRITE
                      Node identifier WRITE_STATEMENT_2
                            Node identifier STATEMENT_LIST_1
        Node identifier STATEMENT_ASS
          Node identifier ASSIGMENT_STATMENT
                      Node identifier EXPRESSION_2
              Node identifier TERM_2
                Node identifier VALUE_ID
                  Node identifier VALUE
                    Node identifier CONSTANT
                      Node identifier CHAR_CONSTANT
                       INTEGER: 0         Node identifier STATEMENT_LIST_1
          Node identifier STATEMENT_DO
            Node identifier STATEMENT_WHILE
              Node identifier STATEMENT_LIST_1
                Node identifier STATEMENT_ASS
                  Node identifier ASSIGMENT_STATMENT
                                      Node identifier COMPAROTOR_6
                      Node identifier EXPRESSION_2
                        Node identifier TERM_2
                          Node identifier TARGET_NUMBER
                           VAL IDENTIFIER: a
                      Node identifier TERM_2
                        Node identifier VALUE_ID
                          Node identifier VALUE
                            Node identifier CONSTANT
                              Node identifier CHAR_CONSTANT
                               INTEGER: 1                 Node identifier STATEMENT_LIST_2
                  Node identifier STATEMENT_IF
                    Node identifier IF_STATEMENT_1
                      Node identifier CONDITIONAL_1
                        Node identifier CONDITIONAL_2
                          Node identifier CONDITION_1
                            Node identifier TERM_3
                              Node identifier EXPRESSION_2
                                Node identifier TERM_2
                                  Node identifier TARGET_NUMBER
                                   VAL IDENTIFIER: a
                              Node identifier CONDITION_2
                                                            Node identifier EXPRESSION_2
                                Node identifier TERM_2
                                  Node identifier VALUE_ID
                                    Node identifier VALUE
                                      Node identifier CONSTANT
                                        Node identifier CHAR_CONSTANT
                                         INTEGER: 6                         Node identifier TERM_3
                          Node identifier EXPRESSION_2
                            Node identifier TERM_2
                              Node identifier TARGET_NUMBER
                               VAL IDENTIFIER: a
                          Node identifier COMPAROTOR_1
                                                    Node identifier EXPRESSION_2
                            Node identifier TERM_2
                              Node identifier VALUE_ID
                                Node identifier VALUE
                                  Node identifier CONSTANT
                                    Node identifier CHAR_CONSTANT
                                     INTEGER: 8                       Node identifier STATEMENT_LIST_1
                        Node identifier STATEMENT_WRITE
                          Node identifier WRITE_STATEMENT_1
                            Node identifier OUTPUT_LIST_2
                              Node identifier TARGET_NUMBER
                               VAL IDENTIFIER: a
                        Node identifier STATEMENT_LIST_2
                          Node identifier STATEMENT_WRITE
                            Node identifier WRITE_STATEMENT_2
                                          Node identifier CONDITIONAL_2
                Node identifier TERM_3
                  Node identifier EXPRESSION_2
                    Node identifier TERM_2
                      Node identifier TARGET_NUMBER
                       VAL IDENTIFIER: a
                  Node identifier COMPAROTOR_2
                                    Node identifier EXPRESSION_2
                    Node identifier TERM_2
                      Node identifier VALUE_ID
                        Node identifier VALUE
                          Node identifier CONSTANT
                            Node identifier CHAR_CONSTANT
                             INTEGER: 14           Node identifier STATEMENT_LIST_1
            Node identifier STATEMENT_ASS
              Node identifier ASSIGMENT_STATMENT
                              Node identifier EXPRESSION_2
                  Node identifier TERM_2
                    Node identifier VALUE_ID
                      Node identifier VALUE
                        Node identifier CONSTANT
                          Node identifier CHAR_CONSTANT
                           INTEGER: 0             Node identifier STATEMENT_LIST_2
              Node identifier DO_STATEMENT
                Node identifier WHILE_STATEMENT
                  Node identifier CONDITIONAL_2
                    Node identifier TERM_3
                      Node identifier EXPRESSION_2
                        Node identifier TERM_2
                          Node identifier TARGET_NUMBER
                           VAL IDENTIFIER: a
                      Node identifier COMPAROTOR_2
                                            Node identifier EXPRESSION_2
                        Node identifier TERM_2
                          Node identifier VALUE_ID
                            Node identifier VALUE
                              Node identifier CONSTANT
                                Node identifier CHAR_CONSTANT
                                 INTEGER: 12                   Node identifier STATEMENT_LIST_1
                    Node identifier STATEMENT_WRITE
                      Node identifier WRITE_STATEMENT_1
                        Node identifier OUTPUT_LIST_2
                          Node identifier TARGET_NUMBER
                           VAL IDENTIFIER: a
                    Node identifier STATEMENT_LIST_2
                      Node identifier STATEMENT_ASS
                        Node identifier ASSIGMENT_STATMENT
                                                  Node identifier COMPAROTOR_6
                            Node identifier EXPRESSION_2
                              Node identifier TERM_2
                                Node identifier TARGET_NUMBER
                                 VAL IDENTIFIER: a
                            Node identifier TERM_2
                              Node identifier VALUE_ID
                                Node identifier VALUE
                                  Node identifier CONSTANT
                                    Node identifier CHAR_CONSTANT
                                     INTEGER: 1 --02/12/2014----------------------------------------------------- 
Parse Tree output for d.spl 
--17:52:14.87----------------------------------------------------- 
Node identifier PROGRAM
  Node identifier BLOCK_1
    Node identifier DECLARATION_BLOCK_1
      Node identifier DECLARATION_2
              Node identifier DECLARATION_2
                  Node identifier DECLARATION_1
                Node identifier TYPE
          Node identifier STATEMENT_LIST_1
      Node identifier STATEMENT_ASS
        Node identifier ASSIGMENT_STATMENT
                  Node identifier EXPRESSION_2
            Node identifier TERM_2
              Node identifier VALUE_ID
                Node identifier VALUE
                  Node identifier NUMBER_CONSTANT
                    Node identifier TARGET_NUMBER_INT
                     FLOAT: 2.4       Node identifier STATEMENT_LIST_1
        Node identifier STATEMENT_ASS
          Node identifier ASSIGMENT_STATMENT
                      Node identifier EXPRESSION_2
              Node identifier TERM_2
                Node identifier VALUE_ID
                  Node identifier VALUE
                    Node identifier NUMBER_CONSTANT
                      Node identifier TARGET_NUMBER_INT
                       FLOAT: 34.989         Node identifier STATEMENT_LIST_1
          Node identifier STATEMENT_ASS
            Node identifier ASSIGMENT_STATMENT
                          Node identifier EXPRESSION_2
                Node identifier TERM_1
                  Node identifier CONDITIONAL_3
                    Node identifier TERM_2
                      Node identifier TARGET_NUMBER
                       VAL IDENTIFIER: r1
                    Node identifier TARGET_NUMBER
                     VAL IDENTIFIER: r2
                  Node identifier VALUE_ID
                    Node identifier VALUE
                      Node identifier CONSTANT
                        Node identifier TARGET_NUMBER_INT
                         FLOAT: 7.4           Node identifier STATEMENT_LIST_1
            Node identifier STATEMENT_WRITE
              Node identifier WRITE_STATEMENT_1
                Node identifier OUTPUT_LIST_2
                  Node identifier TARGET_NUMBER
                   VAL IDENTIFIER: r3
            Node identifier STATEMENT_LIST_1
              Node identifier STATEMENT_WRITE
                Node identifier WRITE_STATEMENT_2
                              Node identifier STATEMENT_LIST_1
                Node identifier STATEMENT_READ
                  Node identifier READ_STATEMENT
                                  Node identifier STATEMENT_LIST_1
                  Node identifier STATEMENT_ASS
                    Node identifier ASSIGMENT_STATMENT
                                          Node identifier COMPAROTOR_6
                        Node identifier EXPRESSION_2
                          Node identifier TERM_2
                            Node identifier TARGET_NUMBER
                             VAL IDENTIFIER: r1
                        Node identifier TERM_2
                          Node identifier TARGET_NUMBER
                           VAL IDENTIFIER: r3
                  Node identifier STATEMENT_LIST_1
                    Node identifier STATEMENT_WRITE
                      Node identifier WRITE_STATEMENT_1
                        Node identifier OUTPUT_LIST_2
                          Node identifier TARGET_NUMBER
                           VAL IDENTIFIER: r3
                    Node identifier STATEMENT_LIST_2
                      Node identifier STATEMENT_WRITE
                        Node identifier WRITE_STATEMENT_2
                        --02/12/2014----------------------------------------------------- 
Parse Tree output for e.spl 
--17:52:15.88----------------------------------------------------- 
Node identifier PROGRAM
  Node identifier BLOCK_1
    Node identifier DECLARATION_BLOCK_1
      Node identifier DECLARATION_2
              Node identifier DECLARATION_1
              Node identifier TYPE
          Node identifier STATEMENT_LIST_1
      Node identifier STATEMENT_READ
        Node identifier READ_STATEMENT
              Node identifier STATEMENT_LIST_1
        Node identifier STATEMENT_IF
          Node identifier IF_STATEMENT_1
            Node identifier CONDITIONAL_1
              Node identifier CONDITIONAL_2
                Node identifier TERM_3
                  Node identifier EXPRESSION_2
                    Node identifier TERM_2
                      Node identifier TARGET_NUMBER
                       VAL IDENTIFIER: integer
                  Node identifier COMPAROTOR_4
                                    Node identifier EXPRESSION_2
                    Node identifier TERM_2
                      Node identifier VALUE_ID
                        Node identifier VALUE
                          Node identifier CONSTANT
                            Node identifier CHAR_CONSTANT
                             INTEGER: 5               Node identifier TERM_3
                Node identifier EXPRESSION_2
                  Node identifier TERM_2
                    Node identifier TARGET_NUMBER
                     VAL IDENTIFIER: integer
                Node identifier COMPAROTOR_5
                                Node identifier EXPRESSION_2
                  Node identifier TERM_2
                    Node identifier VALUE_ID
                      Node identifier VALUE
                        Node identifier CONSTANT
                          Node identifier CHAR_CONSTANT
                           INTEGER: 12             Node identifier STATEMENT_LIST_2
              Node identifier STATEMENT_WRITE
                Node identifier WRITE_STATEMENT_1
                  Node identifier OUTPUT_LIST_2
                    Node identifier TARGET_NUMBER
                     VAL IDENTIFIER: integer
        Node identifier STATEMENT_LIST_1
          Node identifier STATEMENT_WRITE
            Node identifier WRITE_STATEMENT_1
              Node identifier OUTPUT_LIST_2
                Node identifier VALUE_CONSTANT
                  Node identifier EXPRESSION_1
                    Node identifier EXPRESSION_2
                      Node identifier TERM_2
                        Node identifier VALUE_ID
                          Node identifier VALUE
                            Node identifier CONSTANT
                              Node identifier TARGET_NUMBER_INT
                               FLOAT: 35.1                     Node identifier TERM_2
                      Node identifier VALUE_ID
                        Node identifier VALUE
                          Node identifier CONSTANT
                            Node identifier TARGET_NUMBER_INT
                             FLOAT: 0.1           Node identifier STATEMENT_LIST_1
            Node identifier STATEMENT_WRITE
              Node identifier WRITE_STATEMENT_2
                          Node identifier STATEMENT_LIST_1
              Node identifier STATEMENT_FOR
                Node identifier FOR_STATEMENT
                                  Node identifier EXPRESSION_2
                    Node identifier TERM_2
                      Node identifier VALUE_ID
                        Node identifier VALUE
                          Node identifier NUMBER_CONSTANT
                            Node identifier CHAR_CONSTANT
                             INTEGER: 1                   Node identifier EXPRESSION_2
                    Node identifier TERM_2
                      Node identifier VALUE_ID
                        Node identifier VALUE
                          Node identifier NUMBER_CONSTANT
                            Node identifier CHAR_CONSTANT
                             INTEGER: 1                   Node identifier EXPRESSION_2
                    Node identifier TERM_2
                      Node identifier VALUE_ID
                        Node identifier VALUE
                          Node identifier NUMBER_CONSTANT
                            Node identifier CHAR_CONSTANT
                             INTEGER: 5                   Node identifier STATEMENT_LIST_1
                    Node identifier STATEMENT_WRITE
                      Node identifier WRITE_STATEMENT_1
                        Node identifier OUTPUT_LIST_2
                          Node identifier TARGET_NUMBER
                           VAL IDENTIFIER: integer
                    Node identifier STATEMENT_LIST_2
                      Node identifier STATEMENT_WRITE
                        Node identifier WRITE_STATEMENT_2
                                      Node identifier STATEMENT_LIST_1
                Node identifier STATEMENT_ASS
                  Node identifier ASSIGMENT_STATMENT
                                      Node identifier EXPRESSION_2
                      Node identifier TERM_2
                        Node identifier VALUE_ID
                          Node identifier VALUE
                            Node identifier NUMBER_CONSTANT
                              Node identifier CHAR_CONSTANT
                               INTEGER: 1                 Node identifier STATEMENT_LIST_2
                  Node identifier STATEMENT_FOR
                    Node identifier FOR_STATEMENT
                                          Node identifier EXPRESSION_2
                        Node identifier CONDITIONAL_3
                          Node identifier CONDITIONAL_3
                            Node identifier TERM_2
                              Node identifier TARGET_NUMBER
                               VAL IDENTIFIER: i
                            Node identifier TARGET_NUMBER
                             VAL IDENTIFIER: i
                          Node identifier TARGET_NUMBER
                           VAL IDENTIFIER: i
                      Node identifier EXPRESSION_2
                        Node identifier CONDITIONAL_3
                          Node identifier CONDITIONAL_3
                            Node identifier CONDITIONAL_3
                              Node identifier CONDITIONAL_3
                                Node identifier TERM_2
                                  Node identifier TARGET_NUMBER
                                   VAL IDENTIFIER: i
                                Node identifier TARGET_NUMBER
                                 VAL IDENTIFIER: i
                              Node identifier TARGET_NUMBER
                               VAL IDENTIFIER: i
                            Node identifier TARGET_NUMBER
                             VAL IDENTIFIER: i
                          Node identifier TARGET_NUMBER
                           VAL IDENTIFIER: i
                      Node identifier EXPRESSION_2
                        Node identifier CONDITIONAL_3
                          Node identifier CONDITIONAL_3
                            Node identifier TERM_2
                              Node identifier TARGET_NUMBER
                               VAL IDENTIFIER: i
                            Node identifier TARGET_NUMBER
                             VAL IDENTIFIER: i
                          Node identifier VALUE_CONSTANT
                            Node identifier COMPAROTOR_6
                              Node identifier COMPAROTOR_6
                                Node identifier COMPAROTOR_6
                                  Node identifier COMPAROTOR_6
                                    Node identifier EXPRESSION_2
                                      Node identifier TERM_2
                                        Node identifier TARGET_NUMBER
                                         VAL IDENTIFIER: i
                                    Node identifier TERM_2
                                      Node identifier TARGET_NUMBER
                                       VAL IDENTIFIER: i
                                  Node identifier TERM_2
                                    Node identifier TARGET_NUMBER
                                     VAL IDENTIFIER: i
                                Node identifier TERM_2
                                  Node identifier TARGET_NUMBER
                                   VAL IDENTIFIER: i
                              Node identifier TERM_2
                                Node identifier TARGET_NUMBER
                                 VAL IDENTIFIER: i
                      Node identifier STATEMENT_LIST_1
                        Node identifier STATEMENT_WRITE
                          Node identifier WRITE_STATEMENT_1
                            Node identifier OUTPUT_LIST_2
                              Node identifier TARGET_NUMBER
                               VAL IDENTIFIER: integer
                        Node identifier STATEMENT_LIST_2
                          Node identifier STATEMENT_WRITE
                            Node identifier WRITE_STATEMENT_2
                            